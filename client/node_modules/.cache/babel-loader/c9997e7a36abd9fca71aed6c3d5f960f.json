{"ast":null,"code":"'use strict';\n\nvar cleanPositionalOperators = require('../schema/cleanPositionalOperators');\n\nvar handleTimestampOption = require('../schema/handleTimestampOption');\n\nmodule.exports = applyTimestampsToChildren;\n/*!\n * ignore\n */\n\nfunction applyTimestampsToChildren(now, update, schema) {\n  if (update == null) {\n    return;\n  }\n\n  var keys = Object.keys(update);\n  var key;\n  var createdAt;\n  var updatedAt;\n  var timestamps;\n  var path;\n  var hasDollarKey = keys.length && keys[0].startsWith('$');\n\n  if (hasDollarKey) {\n    if (update.$push) {\n      for (key in update.$push) {\n        var $path = schema.path(key);\n\n        if (update.$push[key] && $path && $path.$isMongooseDocumentArray && $path.schema.options.timestamps) {\n          timestamps = $path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (update.$push[key].$each) {\n            update.$push[key].$each.forEach(function (subdoc) {\n              if (updatedAt != null) {\n                subdoc[updatedAt] = now;\n              }\n\n              if (createdAt != null) {\n                subdoc[createdAt] = now;\n              }\n            });\n          } else {\n            if (updatedAt != null) {\n              update.$push[key][updatedAt] = now;\n            }\n\n            if (createdAt != null) {\n              update.$push[key][createdAt] = now;\n            }\n          }\n        }\n      }\n    }\n\n    if (update.$set != null) {\n      var _keys = Object.keys(update.$set);\n\n      for (var _i = 0, _keys2 = _keys; _i < _keys2.length; _i++) {\n        key = _keys2[_i];\n        // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n        var keyToSearch = cleanPositionalOperators(key);\n        path = schema.path(keyToSearch);\n\n        if (!path) {\n          continue;\n        }\n\n        var parentSchemaType = null;\n        var pieces = keyToSearch.split('.');\n\n        for (var i = pieces.length - 1; i > 0; --i) {\n          var s = schema.path(pieces.slice(0, i).join('.'));\n\n          if (s != null && (s.$isMongooseDocumentArray || s.$isSingleNested)) {\n            parentSchemaType = s;\n            break;\n          }\n        }\n\n        if (Array.isArray(update.$set[key]) && path.$isMongooseDocumentArray) {\n          applyTimestampsToDocumentArray(update.$set[key], path, now);\n        } else if (update.$set[key] && path.$isSingleNested) {\n          applyTimestampsToSingleNested(update.$set[key], path, now);\n        } else if (parentSchemaType != null) {\n          timestamps = parentSchemaType.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps || updatedAt == null) {\n            continue;\n          }\n\n          if (parentSchemaType.$isSingleNested) {\n            // Single nested is easy\n            update.$set[parentSchemaType.path + '.' + updatedAt] = now;\n            continue;\n          }\n\n          var childPath = key.substr(parentSchemaType.path.length + 1);\n\n          if (/^\\d+$/.test(childPath)) {\n            update.$set[parentSchemaType.path + '.' + childPath][updatedAt] = now;\n            continue;\n          }\n\n          var firstDot = childPath.indexOf('.');\n          childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\n          update.$set[parentSchemaType.path + '.' + childPath + '.' + updatedAt] = now;\n        } else if (path.schema != null && path.schema != schema && update.$set[key]) {\n          timestamps = path.schema.options.timestamps;\n          createdAt = handleTimestampOption(timestamps, 'createdAt');\n          updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n          if (!timestamps) {\n            continue;\n          }\n\n          if (updatedAt != null) {\n            update.$set[key][updatedAt] = now;\n          }\n\n          if (createdAt != null) {\n            update.$set[key][createdAt] = now;\n          }\n        }\n      }\n    }\n  } else {\n    var _keys3 = Object.keys(update).filter(function (key) {\n      return !key.startsWith('$');\n    });\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _keys3[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        key = _step.value;\n\n        // Replace positional operator `$` and array filters `$[]` and `$[.*]`\n        var _keyToSearch = cleanPositionalOperators(key);\n\n        path = schema.path(_keyToSearch);\n\n        if (!path) {\n          continue;\n        }\n\n        if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\n          applyTimestampsToDocumentArray(update[key], path, now);\n        } else if (update[key] != null && path.$isSingleNested) {\n          applyTimestampsToSingleNested(update[key], path, now);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n}\n\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\n  var timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  var len = arr.length;\n  var createdAt = handleTimestampOption(timestamps, 'createdAt');\n  var updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  for (var i = 0; i < len; ++i) {\n    if (updatedAt != null) {\n      arr[i][updatedAt] = now;\n    }\n\n    if (createdAt != null) {\n      arr[i][createdAt] = now;\n    }\n  }\n}\n\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\n  var timestamps = schematype.schema.options.timestamps;\n\n  if (!timestamps) {\n    return;\n  }\n\n  var createdAt = handleTimestampOption(timestamps, 'createdAt');\n  var updatedAt = handleTimestampOption(timestamps, 'updatedAt');\n\n  if (updatedAt != null) {\n    subdoc[updatedAt] = now;\n  }\n\n  if (createdAt != null) {\n    subdoc[createdAt] = now;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}