{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nvar _classCallCheck = require(\"/Users/abhiaadhav/Desktop/BOOTCAMP/ASSIGNMENT/googlebooksreact/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/abhiaadhav/Desktop/BOOTCAMP/ASSIGNMENT/googlebooksreact/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/abhiaadhav/Desktop/BOOTCAMP/ASSIGNMENT/googlebooksreact/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/abhiaadhav/Desktop/BOOTCAMP/ASSIGNMENT/googlebooksreact/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/abhiaadhav/Desktop/BOOTCAMP/ASSIGNMENT/googlebooksreact/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar MongooseMap = require('../types/map');\n\nvar SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\n\nvar Map =\n/*#__PURE__*/\nfunction (_SchemaType) {\n  _inherits(Map, _SchemaType);\n\n  function Map(key, options) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, key, options, 'Map'));\n    _this.$isSchemaMap = true;\n    return _this;\n  }\n\n  _createClass(Map, [{\n    key: \"cast\",\n    value: function cast(val, doc, init) {\n      if (val instanceof MongooseMap) {\n        return val;\n      }\n\n      if (init) {\n        var map = new MongooseMap({}, this.path, doc, this.$__schemaType);\n\n        if (val instanceof global.Map) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = val.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var key = _step.value;\n              map.$init(key, map.$__schemaType.cast(val.get(key), doc, true));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } else {\n          for (var _i = 0, _Object$keys = Object.keys(val); _i < _Object$keys.length; _i++) {\n            var _key = _Object$keys[_i];\n            map.$init(_key, map.$__schemaType.cast(val[_key], doc, true));\n          }\n        }\n\n        return map;\n      }\n\n      return new MongooseMap(val, this.path, doc, this.$__schemaType);\n    }\n  }]);\n\n  return Map;\n}(SchemaType);\n\nmodule.exports = Map;","map":null,"metadata":{},"sourceType":"script"}